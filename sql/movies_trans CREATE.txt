#create database movies_transactions;

create table if not exists movies_transactions.casts (
	cast_id INT, #autogenerated
	movie_id INT,
	actor_id INT,
	`character` VARCHAR(255),
	`order` INT,
	primary key (cast_id),
	constraint fk_movie_cast foreign key (movie_id) references movies_transactions.movies(movie_id),
	constraint fk_actor_cast foreign key (actor_id) references movies_transactions.actors(actor_id)
);
alter table movies_transactions.casts auto_increment=1;

create table if not exists movies_transactions.actors (
	actor_id INT,
	gender INT,
	actor_name VARCHAR(255),
	profile_path VARCHAR(255),
	constraint pk_actor primary key (actor_id)
);

create table if not exists movies_transactions.crews (
	crew_id INT, #autogenerated
	movie_id INT,
	member_id INT,
	department VARCHAR(255),
	job VARCHAR(255),
	constraint pk_crew primary key (crew_id),
	constraint fk_member_crew foreign key (member_id) references movies_transactions.members(member_id),
	constraint fk_movie_crew foreign key (movie_id) references movies_transactions.movies(movie_id)
);
alter table movies_transactions.crews auto_increment=1;

create table if not exists movies_transactions.members (
	member_id INT,
	gender INT,
	member_name VARCHAR(255),
	profile_path VARCHAR(255),
	constraint pk_member primary key (member_id)
);
alter table movies_transactions.members auto_increment=1;

create table if not exists movies_transactions.collections (
	collection_id INT,
	collection_name VARCHAR(255),
	poster_path VARCHAR(255),
	backdrop_path VARCHAR(255),
	constraint pk_collection primary key (collection_id)
);

create table if not exists movies_transactions.movies_genres (
	movie_genre_id INT,
	genre_id INT,
	movie_id INT,
	constraint pk_movie_genre primary key (movie_genre_id),
	constraint fk_movie_genre_genre foreign key (genre_id) references movies_transactions.genres(genre_id),
	constraint fk_movie_genre_movie foreign key (movie_id) references movies_transactions.movies(movie_id)
);
alter table movies_transactions.movies_genres auto_increment=1;

create table if not exists movies_transactions.genres (
	genre_id INT,
	genre_name VARCHAR(255),
	constraint pk_genre primary key (genre_id)
);

create table if not exists movies_transactions.movies_keywords (
	movie_keyword_id INT,
	movie_id INT,
	keyword_id INT,
	constraint pk_movie_keyword primary key (movie_keyword_id),
	constraint fk_movie_keyword_movie foreign key (movie_id) references movies_transactions.movies(movie_id),
	constraint fk_movie_keyword_keyword foreign key (keyword_id) references movies_transactions.keywords(keyword_id)
);
alter table movies_transactions.movies_keywords auto_increment=1;

create table if not exists movies_transactions.keywords (
	keyword_id INT,
	keyword_name VARCHAR(255),
	constraint pk_keyword primary key (keyword_id)
);

create table if not exists movies_transactions.movies_metadata (
	movie_id INT,
	original_title VARCHAR(255),
	title VARCHAR(255),
	overview mediumtext,
	original_language VARCHAR(2),
	homepage mediumtext,
	budget INT,
	adult binary,
	imdb_id INT,
	popularity FLOAT,
	poster_path mediumtext,
	release_date DATE,
	revenue INT,
	RUNTIME INT,
	status VARCHAR(50),
	tagline mediumtext,
	video binary,
	vote_average FLOAT,
	vote_count INT,
	constraint pk_movies_metadata primary key (movie_id)
);

create table if not exists movies_transactions.movies_production_companies (
	movie_production_company_id INT,
	movie_id INT,
	production_company_id INT,
	constraint pk_movies_production_companies primary key (movie_production_company_id),
	constraint fk_movie_production_companies_movie foreign key (movie_id) references movies_transactions.movies(movie_id),
	constraint fk_movie_production_companies_company foreign key (production_company_id) 
		references movies_transactions.production_companies(production_company_id)
);
alter table movies_transactions.movies_production_companies auto_increment = 1;

create table if not exists movies_transactions.production_companies (
	production_company_id INT,
	production_company_name VARCHAR(255),
	constraint pk_production_companies primary key (production_company_id)
);

create table if not exists movies_transactions.movies_production_countries (
	movie_production_country_id INT,
	movie_id INT,
	production_country_id INT,
	constraint pk_movies_production_countries primary key (movie_production_country_id),
	constraint fk_movies_production_countries_movie foreign key (movie_id)
		references movies_transactions.movies(movie_id),
	constraint fk_movies_production_countries_country foreign key (production_country_id)
		references movies_transactions.production_countries(production_country_id)
	
);
alter table movies_transactions.movies_production_countries auto_increment = 1;

create table if not exists movies_transactions.production_countries (
	production_country_id INT,
	iso_3166_1 VARCHAR(2),
	production_country_name VARCHAR(255),
	constraint pk_production_country primary key (production_country_id)
);

create table if not exists movies_transactions.ratings (
	rating_id INT,
	user_id INT,
	movie_id INT,
	rating FLOAT,
	original_timestamp INT,
	constraint pk_rating primary key (rating_id),
	constraint fk_rating_user foreign key (user_id) references movies_transactions.users(user_id),
	constraint fk_rating_movie foreign key (movie_id) references movies_transactions.movies(movie_id)
);
alter table movies_transactions.ratings modify column rating_id INT auto_increment;

create table if not exists movies_transactions.users (
	user_id INT,
	user_name VARCHAR(255),
	constraint pk_user primary key (user_id)
);

create table if not exists movies_transactions.movies (
	movie_id INT,
	cast_id INT,
	crew_id INT,
	collection_id INT,
	movie_genre_id INT,
	movie_keyword_id INT,
	movie_production_company_id INT,
	movie_production_country_id INT,
	constraint pk_movies primary key (movie_id)
);

alter table movies_transactions.movies
add constraint fk_cast foreign key (cast_id) references movies_transactions.casts(cast_id),
add constraint fk_crew foreign key (crew_id) references movies_transactions.crews(crew_id),
add constraint fk_collection foreign key (collection_id) references movies_transactions.collections(collection_id),
add constraint fk_movie_genre foreign key (movie_genre_id) references movies_transactions.movies_genres(movie_genre_id),
add constraint fk_movie_keyword foreign key (movie_keyword_id) references movies_transactions.movies_keywords(movie_keyword_id),
add constraint fk_prod_company foreign key (movie_production_company_id) 
	references movies_transactions.movies_production_companies(movie_production_company_id),
add constraint fk_prod_country foreign key (movie_production_country_id) 
	references movies_transactions.movies_production_countries(movie_production_country_id);